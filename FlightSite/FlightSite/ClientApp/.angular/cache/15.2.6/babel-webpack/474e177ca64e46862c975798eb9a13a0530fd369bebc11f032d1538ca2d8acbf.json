{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Event;\nEvent.CAPTURING_PHASE = 1;\nEvent.AT_TARGET = 2;\nEvent.BUBBLING_PHASE = 3;\nfunction Event(type, dictionary) {\n  // Initialize basic event properties\n  this.type = '';\n  this.target = null;\n  this.currentTarget = null;\n  this.eventPhase = Event.AT_TARGET;\n  this.bubbles = false;\n  this.cancelable = false;\n  this.isTrusted = false;\n  this.defaultPrevented = false;\n  this.timeStamp = Date.now();\n\n  // Initialize internal flags\n  // XXX: Would it be better to inherit these defaults from the prototype?\n  this._propagationStopped = false;\n  this._immediatePropagationStopped = false;\n  this._initialized = true;\n  this._dispatching = false;\n\n  // Now initialize based on the constructor arguments (if any)\n  if (type) this.type = type;\n  if (dictionary) {\n    for (var p in dictionary) {\n      this[p] = dictionary[p];\n    }\n  }\n}\nEvent.prototype = Object.create(Object.prototype, {\n  constructor: {\n    value: Event\n  },\n  stopPropagation: {\n    value: function stopPropagation() {\n      this._propagationStopped = true;\n    }\n  },\n  stopImmediatePropagation: {\n    value: function stopImmediatePropagation() {\n      this._propagationStopped = true;\n      this._immediatePropagationStopped = true;\n    }\n  },\n  preventDefault: {\n    value: function preventDefault() {\n      if (this.cancelable) this.defaultPrevented = true;\n    }\n  },\n  initEvent: {\n    value: function initEvent(type, bubbles, cancelable) {\n      this._initialized = true;\n      if (this._dispatching) return;\n      this._propagationStopped = false;\n      this._immediatePropagationStopped = false;\n      this.defaultPrevented = false;\n      this.isTrusted = false;\n      this.target = null;\n      this.type = type;\n      this.bubbles = bubbles;\n      this.cancelable = cancelable;\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}
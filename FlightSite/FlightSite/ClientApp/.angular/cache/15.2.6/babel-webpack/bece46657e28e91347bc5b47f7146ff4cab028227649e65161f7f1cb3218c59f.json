{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Leaf;\nvar Node = require('./Node');\nvar NodeList = require('./NodeList');\nvar utils = require('./utils');\nvar HierarchyRequestError = utils.HierarchyRequestError;\nvar NotFoundError = utils.NotFoundError;\n\n// This class defines common functionality for node subtypes that\n// can never have children\nfunction Leaf() {\n  Node.call(this);\n}\nLeaf.prototype = Object.create(Node.prototype, {\n  hasChildNodes: {\n    value: function () {\n      return false;\n    }\n  },\n  firstChild: {\n    value: null\n  },\n  lastChild: {\n    value: null\n  },\n  insertBefore: {\n    value: function (node, child) {\n      if (!node.nodeType) throw new TypeError('not a node');\n      HierarchyRequestError();\n    }\n  },\n  replaceChild: {\n    value: function (node, child) {\n      if (!node.nodeType) throw new TypeError('not a node');\n      HierarchyRequestError();\n    }\n  },\n  removeChild: {\n    value: function (node) {\n      if (!node.nodeType) throw new TypeError('not a node');\n      NotFoundError();\n    }\n  },\n  removeChildren: {\n    value: function () {/* no op */}\n  },\n  childNodes: {\n    get: function () {\n      if (!this._childNodes) this._childNodes = new NodeList();\n      return this._childNodes;\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}
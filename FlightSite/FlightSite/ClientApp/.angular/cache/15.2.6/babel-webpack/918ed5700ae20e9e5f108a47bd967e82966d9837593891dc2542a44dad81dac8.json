{"ast":null,"code":"import { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { RequestBuilder } from '../request-builder';\nimport { map, filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport let FlightService = /*#__PURE__*/(() => {\n  class FlightService extends BaseService {\n    constructor(config, http) {\n      super(config, http);\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `searchFlight$Plain()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n    searchFlight$Plain$Response(params, context) {\n      const rb = new RequestBuilder(this.rootUrl, FlightService.SearchFlightPath, 'get');\n      if (params) {}\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: 'text/plain',\n        context: context\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access only to the response body.\r\n     * To access the full response (for headers, for example), `searchFlight$Plain$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n    searchFlight$Plain(params, context) {\n      return this.searchFlight$Plain$Response(params, context).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `searchFlight()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n    searchFlight$Response(params, context) {\n      const rb = new RequestBuilder(this.rootUrl, FlightService.SearchFlightPath, 'get');\n      if (params) {}\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'text/json',\n        context: context\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access only to the response body.\r\n     * To access the full response (for headers, for example), `searchFlight$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n    searchFlight(params, context) {\n      return this.searchFlight$Response(params, context).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `findFlight$Plain()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n    findFlight$Plain$Response(params, context) {\n      const rb = new RequestBuilder(this.rootUrl, FlightService.FindFlightPath, 'get');\n      if (params) {\n        rb.path('id', params.id, {});\n      }\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: 'text/plain',\n        context: context\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access only to the response body.\r\n     * To access the full response (for headers, for example), `findFlight$Plain$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n    findFlight$Plain(params, context) {\n      return this.findFlight$Plain$Response(params, context).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `findFlight()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n    findFlight$Response(params, context) {\n      const rb = new RequestBuilder(this.rootUrl, FlightService.FindFlightPath, 'get');\n      if (params) {\n        rb.path('id', params.id, {});\n      }\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'text/json',\n        context: context\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access only to the response body.\r\n     * To access the full response (for headers, for example), `findFlight$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n    findFlight(params, context) {\n      return this.findFlight$Response(params, context).pipe(map(r => r.body));\n    }\n  }\n  /**\r\n   * Path part for operation searchFlight\r\n   */\n\n  /**\r\n   * Path part for operation findFlight\r\n   */\n  FlightService.SearchFlightPath = '/Flight';\n  FlightService.FindFlightPath = '/Flight/{id}';\n  FlightService.ɵfac = function FlightService_Factory(t) {\n    return new (t || FlightService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n  };\n  FlightService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FlightService,\n    factory: FlightService.ɵfac,\n    providedIn: 'root'\n  });\n  return FlightService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { RequestBuilder } from '../request-builder';\nimport { map, filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport let BookingService = /*#__PURE__*/(() => {\n  class BookingService extends BaseService {\n    constructor(config, http) {\n      super(config, http);\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `listBooking$Plain()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n    listBooking$Plain$Response(params, context) {\n      const rb = new RequestBuilder(this.rootUrl, BookingService.ListBookingPath, 'get');\n      if (params) {\n        rb.path('email', params.email, {});\n      }\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: 'text/plain',\n        context: context\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access only to the response body.\r\n     * To access the full response (for headers, for example), `listBooking$Plain$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n    listBooking$Plain(params, context) {\n      return this.listBooking$Plain$Response(params, context).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `listBooking()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n    listBooking$Response(params, context) {\n      const rb = new RequestBuilder(this.rootUrl, BookingService.ListBookingPath, 'get');\n      if (params) {\n        rb.path('email', params.email, {});\n      }\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'text/json',\n        context: context\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access only to the response body.\r\n     * To access the full response (for headers, for example), `listBooking$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n    listBooking(params, context) {\n      return this.listBooking$Response(params, context).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `cancelBooking()` instead.\r\n     *\r\n     * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n     */\n    cancelBooking$Response(params, context) {\n      const rb = new RequestBuilder(this.rootUrl, BookingService.CancelBookingPath, 'delete');\n      if (params) {\n        rb.body(params.body, 'application/*+json');\n      }\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: '*/*',\n        context: context\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r.clone({\n          body: undefined\n        });\n      }));\n    }\n    /**\r\n     * This method provides access only to the response body.\r\n     * To access the full response (for headers, for example), `cancelBooking$Response()` instead.\r\n     *\r\n     * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n     */\n    cancelBooking(params, context) {\n      return this.cancelBooking$Response(params, context).pipe(map(r => r.body));\n    }\n  }\n  /**\r\n   * Path part for operation listBooking\r\n   */\n\n  /**\r\n   * Path part for operation cancelBooking\r\n   */\n  BookingService.ListBookingPath = '/api/Booking/{email}';\n  BookingService.CancelBookingPath = '/api/Booking';\n  BookingService.ɵfac = function BookingService_Factory(t) {\n    return new (t || BookingService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n  };\n  BookingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BookingService,\n    factory: BookingService.ɵfac,\n    providedIn: 'root'\n  });\n  return BookingService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
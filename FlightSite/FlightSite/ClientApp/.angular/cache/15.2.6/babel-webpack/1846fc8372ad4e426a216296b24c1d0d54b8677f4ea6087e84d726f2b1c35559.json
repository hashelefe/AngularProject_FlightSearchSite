{"ast":null,"code":"\"use strict\";\n\nvar DOMException = require('./DOMException');\nvar ERR = DOMException;\nvar isApiWritable = require(\"./config\").isApiWritable;\nexports.NAMESPACE = {\n  HTML: 'http://www.w3.org/1999/xhtml',\n  XML: 'http://www.w3.org/XML/1998/namespace',\n  XMLNS: 'http://www.w3.org/2000/xmlns/',\n  MATHML: 'http://www.w3.org/1998/Math/MathML',\n  SVG: 'http://www.w3.org/2000/svg',\n  XLINK: 'http://www.w3.org/1999/xlink'\n};\n\n//\n// Shortcut functions for throwing errors of various types.\n//\nexports.IndexSizeError = function () {\n  throw new DOMException(ERR.INDEX_SIZE_ERR);\n};\nexports.HierarchyRequestError = function () {\n  throw new DOMException(ERR.HIERARCHY_REQUEST_ERR);\n};\nexports.WrongDocumentError = function () {\n  throw new DOMException(ERR.WRONG_DOCUMENT_ERR);\n};\nexports.InvalidCharacterError = function () {\n  throw new DOMException(ERR.INVALID_CHARACTER_ERR);\n};\nexports.NoModificationAllowedError = function () {\n  throw new DOMException(ERR.NO_MODIFICATION_ALLOWED_ERR);\n};\nexports.NotFoundError = function () {\n  throw new DOMException(ERR.NOT_FOUND_ERR);\n};\nexports.NotSupportedError = function () {\n  throw new DOMException(ERR.NOT_SUPPORTED_ERR);\n};\nexports.InvalidStateError = function () {\n  throw new DOMException(ERR.INVALID_STATE_ERR);\n};\nexports.SyntaxError = function () {\n  throw new DOMException(ERR.SYNTAX_ERR);\n};\nexports.InvalidModificationError = function () {\n  throw new DOMException(ERR.INVALID_MODIFICATION_ERR);\n};\nexports.NamespaceError = function () {\n  throw new DOMException(ERR.NAMESPACE_ERR);\n};\nexports.InvalidAccessError = function () {\n  throw new DOMException(ERR.INVALID_ACCESS_ERR);\n};\nexports.TypeMismatchError = function () {\n  throw new DOMException(ERR.TYPE_MISMATCH_ERR);\n};\nexports.SecurityError = function () {\n  throw new DOMException(ERR.SECURITY_ERR);\n};\nexports.NetworkError = function () {\n  throw new DOMException(ERR.NETWORK_ERR);\n};\nexports.AbortError = function () {\n  throw new DOMException(ERR.ABORT_ERR);\n};\nexports.UrlMismatchError = function () {\n  throw new DOMException(ERR.URL_MISMATCH_ERR);\n};\nexports.QuotaExceededError = function () {\n  throw new DOMException(ERR.QUOTA_EXCEEDED_ERR);\n};\nexports.TimeoutError = function () {\n  throw new DOMException(ERR.TIMEOUT_ERR);\n};\nexports.InvalidNodeTypeError = function () {\n  throw new DOMException(ERR.INVALID_NODE_TYPE_ERR);\n};\nexports.DataCloneError = function () {\n  throw new DOMException(ERR.DATA_CLONE_ERR);\n};\nexports.nyi = function () {\n  throw new Error(\"NotYetImplemented\");\n};\nexports.shouldOverride = function () {\n  throw new Error(\"Abstract function; should be overriding in subclass.\");\n};\nexports.assert = function (expr, msg) {\n  if (!expr) {\n    throw new Error(\"Assertion failed: \" + (msg || \"\") + \"\\n\" + new Error().stack);\n  }\n};\nexports.expose = function (src, c) {\n  for (var n in src) {\n    Object.defineProperty(c.prototype, n, {\n      value: src[n],\n      writable: isApiWritable\n    });\n  }\n};\nexports.merge = function (a, b) {\n  for (var n in b) {\n    a[n] = b[n];\n  }\n};\n\n// Compare two nodes based on their document order. This function is intended\n// to be passed to sort(). Assumes that the array being sorted does not\n// contain duplicates.  And that all nodes are connected and comparable.\n// Clever code by ppk via jeresig.\nexports.documentOrder = function (n, m) {\n  /* jshint bitwise: false */\n  return 3 - (n.compareDocumentPosition(m) & 6);\n};\nexports.toASCIILowerCase = function (s) {\n  return s.replace(/[A-Z]+/g, function (c) {\n    return c.toLowerCase();\n  });\n};\nexports.toASCIIUpperCase = function (s) {\n  return s.replace(/[a-z]+/g, function (c) {\n    return c.toUpperCase();\n  });\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}
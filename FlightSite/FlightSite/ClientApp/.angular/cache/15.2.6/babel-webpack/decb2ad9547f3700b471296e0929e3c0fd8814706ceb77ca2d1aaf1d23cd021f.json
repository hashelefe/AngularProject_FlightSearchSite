{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FlightService } from './../api/services/flight.service';\nimport { AuthService } from '../auth/auth.service';\nimport { FormBuilder, Validators } from '@angular/forms';\nlet BookFlightComponent = class BookFlightComponent {\n  constructor(route, router, flightService, authService, formBuilder) {\n    this.route = route;\n    this.router = router;\n    this.flightService = flightService;\n    this.authService = authService;\n    this.formBuilder = formBuilder;\n    this.flightId = 'not loaded';\n    this.flight = {};\n    this.form = this.formBuilder.group({\n      number: [1, Validators.compose([Validators.required, Validators.min(1), Validators.max(254)])]\n    });\n    this.findFlight = flightId => {\n      this.flightId = flightId !== null && flightId !== void 0 ? flightId : 'not passed';\n      this.flightService.findFlight({\n        id: this.flightId\n      }).subscribe(flight => this.flight = flight, this.handleError);\n    };\n    this.handleError = err => {\n      if (err.status == 404) {\n        alert(\"Search not found\");\n        this.router.navigate(['/search-flights']);\n      }\n      console.log(\"Response Error Status: \", err.status);\n      console.log(\"Response Text: \", err.statusText);\n      console.log(err);\n    };\n  }\n  ngOnInit() {\n    if (!this.authService.currentUser) this.router.navigate(['/register-passenger']);\n    this.route.paramMap.subscribe(p => this.findFlight(p.get(\"flightId\")));\n  }\n  book() {\n    var _a, _b, _c;\n    if (this.form.invalid) return;\n    console.log(`Booking ${(_a = this.form.get('number')) === null || _a === void 0 ? void 0 : _a.value} passengers for the flight: ${this.flight.id}`);\n    const booking = {\n      flightId: this.flight.id,\n      passengerEmail: (_b = this.authService.currentUser) === null || _b === void 0 ? void 0 : _b.email,\n      numberOfSeats: (_c = this.form.get('number')) === null || _c === void 0 ? void 0 : _c.value\n    };\n    this.flightService.bookFlight({\n      body: booking\n    }).subscribe(_ => this.router.navigate['/my-bookings']);\n    console.log(\"Navigating\");\n  }\n  get number() {\n    return this.form.controls.number;\n  }\n};\nBookFlightComponent = __decorate([Component({\n  selector: 'app-book-flight',\n  templateUrl: './book-flight.component.html',\n  styleUrls: ['./book-flight.component.css']\n}), __metadata(\"design:paramtypes\", [ActivatedRoute, Router, FlightService, AuthService, FormBuilder])], BookFlightComponent);\nexport { BookFlightComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}